#!/usr/bin/env python
# vim: set fileencoding=UTF-8 filetype=python :
#
#  When the configuration file is loaded, several automatic transformations
#  are applied:
#
# 1) '{cfg_abs_path}' as a substring of atomic attributes is replaced by
#    an absolute path of the configuration files.  This can be used to
#    make the configuration file independent of the location of programs
#    using the configuration file.
#
# or better use the as_project_path function

import os.path

from alex.components.dm.dddstate import DeterministicDiscriminativeDialogueState
from alex.components.dm.dummypolicy import DummyDialoguePolicy
from alex.utils.mproc import SystemLogger
from alex.utils.sessionlogger import SessionLogger
from alex.utils.excepthook import ExceptionHook
from alex.utils.config import as_project_path
from alex.utils.analytics import Analytics

config = {
    'General': {
        'include': [as_project_path('resources/private/default.cfg')],
        'debug': False,
    },
    'Analytics': Analytics(),
    'Audio': {
        'sample_rate': 16000,
        'samples_per_frame': 256,
    },
    'AudioIO': {
        'play_buffer_size': 1024,
        'debug': True,
        'output_dir': './aio_call_log',
    },
    'VoipIO': {
        'pjsip_log_level': 3,
        'debug': True,
        'reject_calls': False,
        'allowed_phone_numbers': r"(^[234567])",
        'forbidden_phone_number': r"(^112$|^150$|^155$|^156$|^158$)",
        'allowed_users': r"(^[234567])",
        'forbidden_users': r"(^112$|^150$|^155$|^156$|^158$)",
        'allowed_hosts': r"",
        'forbidden_hosts': r"",
    },
    'VAD': {
        'debug': False,
        'type': 'ffnn',
        'speech_buffer_frames': 25,
        'decision_frames_speech': 10,
        'decision_frames_sil': 25,
        'decision_speech_threshold': 0.7,
        'decision_non_speech_threshold': 0.2,
        'power': {
            'threshold': 70,
            'threshold_multiplier': 1.0,
            'adaptation_frames': 30,
        },
        'gmm': {
            'frontend': 'MFCC',
            'framesize': 512,
            'frameshift': 160,
            'usehamming': True,
            'preemcoef': 0.97,
            'numchans': 26,
            'ceplifter': 22,
            'numceps': 12,
            'enormalise': True,
            'zmeansource': True,
            'usepower': True,
            'usec0': False,
            'usecmn': False,
            'usedelta': True,
            'useacc': True,
            'n_last_frames': 0,
            'lofreq': 125,
            'hifreq': 3800,
            'speech_model': '{cfg_abs_path}/vad/voip/vad_speech_sds_mfcc_m064_f100000.gmm',
            'sil_model': '{cfg_abs_path}/vad/voip/vad_sil_sds_mfcc_m064_f100000.gmm',
            'filter_length': 2,
        },
        'ffnn': {
            'frontend': 'MFCC',
            'framesize': 512,
            'frameshift': 160,
            'usehamming': True,
            'preemcoef': 0.97,
            'numchans': 26,
            'ceplifter': 22,
            'numceps': 12,
            'enormalise': True,
            'zmeansource': True,
            'usepower': True,
            'usec0': False,
            'usecmn': False,
            'usedelta': True,
            'useacc': True,
            'n_last_frames': 0,
            'lofreq': 125,
            'hifreq': 3800,
            'model': '{cfg_abs_path}/vad/voip/vad_sds_mfcc_is36_hu32_lf0_mfr5000000_mfl1000000_mfps50_ts0_usec00.nn',
            'filter_length': 2,
        },
    },
    'ASR': {
        'debug': True,
        'type': 'Julius',
        'Julius': {
            'debug': False,
            'reuse_server': False,
            'binary': '/usr/local/bin/julius',
            'killall': False,  # Kill all previous running Julius instances when
            # starting the Julius ASR component.
            # This means that this option must not be True if you
            # want to run multiple instances of the alex app on the
            # same server.
            'pidfile': 'julius.pid',
            'start_wait_time': 0.5,  # in seconds
            'start_max_wait_time': 15,  # in seconds
            'msg_timeout': 0.3,  # timeout for each single message, in seconds
            'timeout': 2.0,  # timeout for a complete recognised utterance, in seconds
            'hostname': "localhost",
            'serverport': 10500,
            'adinnetport': 5530,
            'jconffile': 'julius.jconf',
            'logfile': 'julius.log',
            'jconf': {
            ## Language model

            # Note that Julius crashes with binary acoustic and language models

            #"-d": "{cfg_abs_path}/lm/caminfo/julius_bigram",
            #"-d": "{cfg_abs_path}/lm/caminfo/julius_trigram",

            "-nlr": "{cfg_abs_path}/lm/caminfo/julius_arpa_bigram",
            #"-nrl": "{cfg_abs_path}/lm/caminfo/julius_arpa_rev_trigram",
            "-nrl": "{cfg_abs_path}/lm/caminfo/julius_arpa_rev_bigram",
            "-v": "{cfg_abs_path}/lm/caminfo/julius_dict",
            "-silhead": "<s>",
            "-siltail": "</s>",
            "-mapunk": "UM",

            ## Acoustic HMM file

            # support ascii hmmdefs or binary format (converted by "mkbinhmm")
            # format (ascii/binary) will be automatically detected
            #"-h": "{cfg_abs_path}/asr/voip_en/julius_hmmdefs",
            "-h": "{cfg_abs_path}/asr/voip_en/hmmdefs",
            # triphone model needs HMMList that maps logical triphone to physical ones.
            #"-hlist": "{cfg_abs_path}/asr/voip_en/julius_tiedlist",
            "-hlist": "{cfg_abs_path}/asr/voip_en/tiedlist",

            ## Frontend

            "-htkconf": "{cfg_abs_path}/asr/voip_en/config",

            ## Word insertion penalty

            "-lmp": "15.0 0.0",   # first pass
            "-lmp2": "15.0 0.0",   # second pass

            "-no_ccd": "",     # disable context-dependency handling

            # Gaussian Pruning
            "-tmix": "4",

            ## Select Gaussian pruning algorithm

            # default: beam (standard setting), safe (others)
            "-gprune": "safe",      # safe pruning, accurate but slow
            #"-gprune": "heuristic", # heuristic pruning
            #"-gprune": "beam",      # beam pruning, fast but sensitive
            #"-gprune": "none",      # no pruning

            # Search Parameters
            "-b": "1000",                  # beam width on 1st pass (#nodes) for triphone,PTM,engine=v2.1
            "-b2": "100",                # beam width on 2nd pass (#words)
            #"-sb": "100.0",               # score beam envelope threshold
            #"-s": "1500",                 # hypotheses stack size on 2nd pass (#hypo)
            #"-m": "2000",                 # hypotheses overflow threshold (#hypo)
            #"-lookuprange": "10",         # lookup range for word expansion (#frame)
            #"-n": "1",                    # num of sentences to find (#sentence)
            "-n": "50",  # (default for 'standard' configuration)
            #"-output": "2",               # num of found sentences to output (#sentence)

            #### Inter-Word Short Pause handling
            "-spmodel": "sp",   # HMM model name

            # For insertion of context-free short-term inter-word pauses between words
            #  (multi-path version only)
            "-iwsp": "",     # append a skippable sp model at all word ends
            "-iwsppenalty": "0.0",   # transition penalty for the appenede sp models

            "-cmnsave": "cmn.param",  # save CMN param to file (update per input)
            "-cmnload": "cmn.param",  # load initial CMN param from file on startup
            "-cmnmapweight": "200",        # the weight of initial cepstral mean for MAP-CMN

            #"-cmalpha": "0.05:,   # smoothing coef. alpha

            #"-lattice": "",
            #"-graphrange": "10",  # this is useful only when computing lattice without confnet
            "-confnet": "",

            ## Input and module mode
            "-module": "10500",    # Run Julius on "Server module mode"
            "-input": "adinnet",   # Network audio input
            "-adport": "5530",

            "-fallback1pass": "",
            },
        },
        'Kaldi': {
            'hypothesis_type': 'nblist',
            'model': 'TODO_path_to_model',
            'LM_scale': -6666.66,
            'lat_depth': 666666,
        },
        'Google': {
            'debug': False,
            'language': 'en',
            'maxresults': 20,
        }
    },
    'SLU': {
        'debug': False,
        # Type of the classifier:
        #   'cl-seq' ... the original classifier with category label
        #                abstraction, with sequential numbering of category
        #                labels
        #   'cl-tracing' ... category label substitution with tracing the
        #                original surface string and substituting it back
        #                adaptively based on the classifier instantiation
        #                applied
        'type': 'cl-tracing',
        'cl-tracing': {
            'cldb_fname': as_project_path(os.path.join(
                'applications', 'CamInfoRest', 'data', 'database.py')),
            'features_type': ('ngram', 'ab_ngram', ),
            'do_preprocessing': True,
            # 'das_loading_fun': <alternative function for loading DAs>
            'training': {
                'abstractions': ('abstract', ),
                'models_dir': 'models',
            },
            # 'clser': <a trained DAI classifier object>
            'testing': {
                # 'model_fname': <specify one>,
                'model_fname': as_project_path(os.path.join(
                    'applications', 'CamInfoRest', 'models',
                    '130516_minf60-minfc35-mind60.slu_model.gz')),
                'max_examples': None,
                'min_perc': 80,
                'renormalise': True,   # Whether to normalise probabilities for
                                       # alternative values for same slots.
                'threshold': None,     # set to None to use the learned one
                'vanilla': True,       # set to True if no output files should be
                                       # written
            }
        }
    },
    'DM': {
        'debug': True,
        'input_timeout': 3.0,   # in seconds
        'type': 'basic',
        'basic': {
            'debug': True,
            'silence_timeout': 10.0, # in seconds
        },
        'ontology': as_project_path('applications/PublicTransportInfoCS/data/ontology.py'),  # FJ: what is the default domain?
        'dialogue_state': {
            'type': DeterministicDiscriminativeDialogueState,
        },
        'dialogue_policy': {
            'type': DummyDialoguePolicy,
        },

        'UfalRuleDM': {
            'db_cfg': '{cfg_abs_path}/../applications/CamInfoRest/cued_data/CIRdbase_V7_noloc.txt',
            'ontology': '{cfg_abs_path}/../applications/CamInfoRest/ontology.cfg',
            'provide_code': False,
            'code_submit_url': None
        },
        'PUfalRuleDM': {
            'db_cfg': '{cfg_abs_path}/../applications/CamInfoRest/cued_data/CIRdbase_V7_noloc.txt',
            'ontology': '{cfg_abs_path}/../applications/CamInfoRest/ontology.cfg',
            'provide_code': False,
            'code_submit_url': None
        }
    },
    'NLG': {
        'debug': True,
        'type': 'Template',
        'Template': {
            'model': '{cfg_abs_path}/../applications/CamInfoRest/nlgtemplates.cfg'
        },
    },
    'TTS': {
        'debug': True,
        'in_between_segments_silence': 0.01,
        'type': 'Flite',
        'Google': {
            'debug': False,
            'language': 'en',
            'preprocessing': as_project_path("resources/tts/prep_google_en.cfg"),
            'tempo': 1.0,
        },
        'Flite': {
            'debug': False,
            'voice': 'kal16',
            'preprocessing': as_project_path("resources/tts/prep_flite_en.cfg"),
            'tempo': 1.0,
        },
        'SpeechTech': {
            'debug': True,
            'voice': 'Iva210',
            'preprocessing': as_project_path("resources/tts/prep_speechtech_cs.cfg"),
            'tempo': 1.2,
        },
        'VoiceRss': {
            'language': 'en-gb',
            'preprocessing': as_project_path("resources/tts/prep_voicerss_en.cfg"),
            'tempo': 1.0,
        }
    },
    'Hub': {
        'main_loop_sleep_time': 0.002,
        'history_file': 'hub_history_hub.txt',
        'history_length': 1000,
    },
    'SHub': {
        'history_file': 'hub_history_shub.txt',
        'history_length': 1000,
    },
    'THub': {
        'history_file': 'hub_history_thub.txt',
        'history_length': 1000,
    },
    'VoipHub': {
        'pid_file': as_project_path("applications/vhub.pid"),
        'wait_time_before_calling_back': 10,
        'history_length': 1000,
        'hard_time_limit': 6 * 60,  # maximal length of a dialogue in seconds
        'hard_turn_limit': 120,   # maximal number of turn in a dialogue

        'call_db': './call_logs/call_db.pckl',
        'period': 48 * 60 * 60,    # in seconds
        'last_period_max_num_calls': 200,
        'last_period_max_total_time': 120 * 60,  # in seconds
        'blacklist_for': 2 * 60 * 60,            # in seconds
        'limit_reached_message': u'Thank you for calling. Your calling limit was reached. Please call later.',
    },
    'WebHub': {
        'port': 8000,
    },
    'Logging': {
        'system_name': "Default alex",
        'version': "1.0",
        'system_logger': SystemLogger(stdout=True, output_dir='./call_logs'),
        'session_logger': SessionLogger(),
        'excepthook': ExceptionHook(hook_type='log', logger=SystemLogger(stdout=True, output_dir='./call_logs')),
    },
    'corpustools': {
        'get_jasr_confnets': {
            'rt_ratio': 0.2,
            'frame_size': 256,  # size of an audio frame in bytes
        },
    },
}
